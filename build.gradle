buildscript {
	repositories {
		maven { url "https://plugins.gradle.org/m2/" }
		maven { url "https://repo.spring.io/libs-release/" }
		mavenCentral()
		maven { url "https://repo.spring.io/milestone/" }
		maven { url "https://ajoberstar.org/bintray-backup/" }
	}
}

plugins {
	id 'org.ajoberstar.reckon' version '0.18.3'
	id 'org.springframework.boot' version '3.3.3'
	id "io.spring.dependency-management" version "1.1.6"
	id 'com.google.cloud.tools.jib' version '3.4.3'
	id 'java'
	id "application"
}

group = 'io.dnsmonitor.dns'

sourceCompatibility = 1.17
targetCompatibility = 1.17

ext {
	set('springCloudVersion', "2022.0.3")
	set('micrometerVersion', "1.1.4")
}

repositories {
	maven { url "https://repo.spring.io/libs-release" }
	mavenCentral()
	maven { url "https://repo.spring.io/milestone/" }
}

application {
	mainClass.set("io.dnsmonitor.dns.client.DnsClientApplication")
}

jar {
	enabled = false
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation "io.micrometer:micrometer-tracing-bridge-otel:${micrometerVersion}"
	implementation 'dnsjava:dnsjava:3.5.3'
	implementation 'org.apache.commons:commons-text:1.12.0'
	implementation 'com.google.code.findbugs:jsr305:3.0.2'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

test {
	useJUnitPlatform()
}

reckon {
	stages('rc', 'final')

	// how do you calculate the scope/stage
	scopeCalc = calcScopeFromProp().or(calcScopeFromCommitMessages()) // fall back to commit message (see below) if no explicit prop set
	stageCalc = calcStageFromProp()
	tagWriter = version -> "v" + version
}

jib {
	from {
		image = 'eclipse-temurin:17-focal'
	}
	to {
		image = 'europe-docker.pkg.dev/dnsmonitor/containers/dns-client'
		project.afterEvaluate {
			def reconVersion = version.toString()
			if (!reconVersion.contains("-rc")) {
				tags = [version.toString(), 'latest']
			} else {
				tags = ['latest']
			}
		}
	}
	container {
		mainClass = "io.dnsmonitor.dns.client.DnsClientApplication"
		ports = ['8001']
		format = 'OCI'

		creationTime = 'USE_CURRENT_TIMESTAMP'
	}
	allowInsecureRegistries = false
}
