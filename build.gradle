buildscript {
	repositories {
		maven { url "https://plugins.gradle.org/m2/" }
		maven { url "https://repo.spring.io/libs-release/" }
		mavenCentral()
		maven { url "https://repo.spring.io/milestone/" }
		maven { url "https://ajoberstar.org/bintray-backup/" }
	}
}

plugins {
	id 'org.springframework.boot' version '3.3.3'
	id "io.spring.dependency-management" version "1.1.6"
	id 'com.google.cloud.tools.jib' version '3.4.4'
	id 'java'
	id "application"
}

group = 'io.dnsmonitor.dns'

ext {
	set('springVersion', "6.1.13")
	set('springCloudVersion', "2023.0.3")
	set('micrometerVersion', "1.13.4")
	set('micrometerTracingVersion', "1.3.4")
	set('opentelemetryVersion', "1.42.1")
}

application {
	mainClass.set("io.dnsmonitor.dns.client.DnsClientApplication")
}

jar {
	enabled = false
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation "io.micrometer:micrometer-tracing-bridge-otel"
	implementation 'dnsjava:dnsjava:3.6.3'
	implementation 'org.apache.commons:commons-text:1.13.0'
	implementation 'com.google.code.findbugs:jsr305:3.0.2'

	testImplementation 'org.junit.jupiter:junit-jupiter:5.12.2'
	testImplementation 'org.xmlunit:xmlunit-core:2.10.0'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

dependencyManagement {
	imports {
		mavenBom "org.springframework:spring-framework-bom:${springVersion}"
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		mavenBom "io.opentelemetry:opentelemetry-bom:${opentelemetryVersion}"
		mavenBom "io.micrometer:micrometer-bom:${micrometerVersion}"
		mavenBom "io.micrometer:micrometer-tracing-bom:${micrometerTracingVersion}"
	}
}

java {
	sourceCompatibility = 21
	targetCompatibility = 21
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
		vendor = JvmVendorSpec.ADOPTIUM
	}
}

test {
	useJUnitPlatform()
}

jib {
	from {
		image = 'eclipse-temurin:21-noble' // Noble = Ubuntu 24.04 LTS
	}
	to {
		image = 'europe-docker.pkg.dev/dnsmonitor/containers/dns-client'
		project.afterEvaluate {
			def reconVersion = version.toString()
			if (!reconVersion.contains("-rc")) {
				tags = [version.toString(), 'latest']
			} else {
				tags = ['latest']
			}
		}
	}
	container {
		mainClass = "io.dnsmonitor.dns.client.DnsClientApplication"
		ports = ['8001']
		format = 'OCI'

		creationTime = 'USE_CURRENT_TIMESTAMP'
	}
	allowInsecureRegistries = false
}
